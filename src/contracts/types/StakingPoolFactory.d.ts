/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface StakingPoolFactoryInterface extends ethers.utils.Interface {
  functions: {
    "addPoolCreator(address)": FunctionFragment;
    "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": FunctionFragment;
    "isPoolCreator(address)": FunctionFragment;
    "minimumStakeAmount()": FunctionFragment;
    "oracleContract()": FunctionFragment;
    "renouncePoolCreator()": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "setMinimuntToStake(uint256)": FunctionFragment;
    "setOracleContract(address)": FunctionFragment;
    "setSwapRouter(address)": FunctionFragment;
    "setTaxRate(uint256)": FunctionFragment;
    "stakingPoolTaxRate()": FunctionFragment;
    "swapRouter()": FunctionFragment;
    "totemToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addPoolCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "create",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPoolCreator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "minimumStakeAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "oracleContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renouncePoolCreator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setMinimuntToStake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOracleContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSwapRouter",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setTaxRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPoolTaxRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "swapRouter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totemToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addPoolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "create", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPoolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumStakeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "oracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renouncePoolCreator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinimuntToStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOracleContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSwapRouter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTaxRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingPoolTaxRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totemToken", data: BytesLike): Result;

  events: {
    "PoolCreated(address,string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)": EventFragment;
    "PoolCreatorAdded(address)": EventFragment;
    "PoolCreatorRemoved(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreatorAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolCreatorRemoved"): EventFragment;
}

export class StakingPoolFactory extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: StakingPoolFactoryInterface;

  functions: {
    addPoolCreator(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addPoolCreator(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    create(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isPoolCreator(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isPoolCreator(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    oracleContract(overrides?: CallOverrides): Promise<[string]>;

    "oracleContract()"(overrides?: CallOverrides): Promise<[string]>;

    renouncePoolCreator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renouncePoolCreator()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

    setMinimuntToStake(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMinimuntToStake(uint256)"(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracleContract(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setOracleContract(address)"(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTaxRate(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTaxRate(uint256)"(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPoolTaxRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapRouter(overrides?: CallOverrides): Promise<[string]>;

    "swapRouter()"(overrides?: CallOverrides): Promise<[string]>;

    totemToken(overrides?: CallOverrides): Promise<[string]>;

    "totemToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addPoolCreator(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addPoolCreator(address)"(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  create(
    _poolType: string,
    maturityTime: BigNumberish,
    lockTime: BigNumberish,
    sizeAllocation: BigNumberish,
    stakeApr: BigNumberish,
    prizeAmount: BigNumberish,
    usdPrizeAmount: BigNumberish,
    potentialCollabReward: BigNumberish,
    collaborativeRange: BigNumberish,
    burnRate: BigNumberish,
    isEnhancedEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
    _poolType: string,
    maturityTime: BigNumberish,
    lockTime: BigNumberish,
    sizeAllocation: BigNumberish,
    stakeApr: BigNumberish,
    prizeAmount: BigNumberish,
    usdPrizeAmount: BigNumberish,
    potentialCollabReward: BigNumberish,
    collaborativeRange: BigNumberish,
    burnRate: BigNumberish,
    isEnhancedEnabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

  "isPoolCreator(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  oracleContract(overrides?: CallOverrides): Promise<string>;

  "oracleContract()"(overrides?: CallOverrides): Promise<string>;

  renouncePoolCreator(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renouncePoolCreator()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  "rewardManager()"(overrides?: CallOverrides): Promise<string>;

  setMinimuntToStake(
    newMinimumStakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMinimuntToStake(uint256)"(
    newMinimumStakeAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracleContract(
    _oracleContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setOracleContract(address)"(
    _oracleContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSwapRouter(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSwapRouter(address)"(
    _swapRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTaxRate(
    newStakingPoolTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTaxRate(uint256)"(
    newStakingPoolTaxRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

  "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapRouter(overrides?: CallOverrides): Promise<string>;

  "swapRouter()"(overrides?: CallOverrides): Promise<string>;

  totemToken(overrides?: CallOverrides): Promise<string>;

  "totemToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addPoolCreator(account: string, overrides?: CallOverrides): Promise<void>;

    "addPoolCreator(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<void>;

    create(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: CallOverrides
    ): Promise<string>;

    isPoolCreator(account: string, overrides?: CallOverrides): Promise<boolean>;

    "isPoolCreator(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<string>;

    "oracleContract()"(overrides?: CallOverrides): Promise<string>;

    renouncePoolCreator(overrides?: CallOverrides): Promise<void>;

    "renouncePoolCreator()"(overrides?: CallOverrides): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    setMinimuntToStake(
      newMinimumStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMinimuntToStake(uint256)"(
      newMinimumStakeAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracleContract(
      _oracleContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setOracleContract(address)"(
      _oracleContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setTaxRate(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setTaxRate(uint256)"(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<string>;

    "swapRouter()"(overrides?: CallOverrides): Promise<string>;

    totemToken(overrides?: CallOverrides): Promise<string>;

    "totemToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    PoolCreated(
      pool: string | null,
      poolType: null,
      maturityTime: null,
      lockTime: null,
      sizeAllocation: null,
      stakeApr: null,
      prizeAmount: null,
      usdPrizeAmount: null,
      potentialCollabReward: null,
      collaborativeRange: null,
      stakingPoolTaxRate: null,
      minimumStakeAmount: null,
      isEnhancedEnabled: null
    ): TypedEventFilter<
      [
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ],
      {
        pool: string;
        poolType: string;
        maturityTime: BigNumber;
        lockTime: BigNumber;
        sizeAllocation: BigNumber;
        stakeApr: BigNumber;
        prizeAmount: BigNumber;
        usdPrizeAmount: BigNumber;
        potentialCollabReward: BigNumber;
        collaborativeRange: BigNumber;
        stakingPoolTaxRate: BigNumber;
        minimumStakeAmount: BigNumber;
        isEnhancedEnabled: boolean;
      }
    >;

    PoolCreatorAdded(
      account: string | null
    ): TypedEventFilter<[string], { account: string }>;

    PoolCreatorRemoved(
      account: string | null
    ): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    addPoolCreator(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addPoolCreator(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    create(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isPoolCreator(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isPoolCreator(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    minimumStakeAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minimumStakeAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    oracleContract(overrides?: CallOverrides): Promise<BigNumber>;

    "oracleContract()"(overrides?: CallOverrides): Promise<BigNumber>;

    renouncePoolCreator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renouncePoolCreator()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    setMinimuntToStake(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMinimuntToStake(uint256)"(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracleContract(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setOracleContract(address)"(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTaxRate(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTaxRate(uint256)"(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPoolTaxRate(overrides?: CallOverrides): Promise<BigNumber>;

    "stakingPoolTaxRate()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapRouter(overrides?: CallOverrides): Promise<BigNumber>;

    "swapRouter()"(overrides?: CallOverrides): Promise<BigNumber>;

    totemToken(overrides?: CallOverrides): Promise<BigNumber>;

    "totemToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addPoolCreator(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addPoolCreator(address)"(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    create(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "create(string,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,bool)"(
      _poolType: string,
      maturityTime: BigNumberish,
      lockTime: BigNumberish,
      sizeAllocation: BigNumberish,
      stakeApr: BigNumberish,
      prizeAmount: BigNumberish,
      usdPrizeAmount: BigNumberish,
      potentialCollabReward: BigNumberish,
      collaborativeRange: BigNumberish,
      burnRate: BigNumberish,
      isEnhancedEnabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isPoolCreator(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPoolCreator(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    minimumStakeAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "minimumStakeAmount()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    oracleContract(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "oracleContract()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renouncePoolCreator(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renouncePoolCreator()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setMinimuntToStake(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMinimuntToStake(uint256)"(
      newMinimumStakeAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracleContract(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setOracleContract(address)"(
      _oracleContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSwapRouter(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSwapRouter(address)"(
      _swapRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTaxRate(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTaxRate(uint256)"(
      newStakingPoolTaxRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPoolTaxRate(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "stakingPoolTaxRate()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapRouter()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totemToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totemToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
