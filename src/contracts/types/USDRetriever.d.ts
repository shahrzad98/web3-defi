/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface USDRetrieverInterface extends ethers.utils.Interface {
  functions: {
    "getUSDBalance()": FunctionFragment;
    "getUSDToken()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getUSDBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUSDToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "getUSDBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUSDToken",
    data: BytesLike
  ): Result;

  events: {
    "ApproveTokens(address,uint256)": EventFragment;
    "ReceivedTokens(address,uint256)": EventFragment;
    "TransferTokens(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApproveTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ReceivedTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTokens"): EventFragment;
}

export class USDRetriever extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: USDRetrieverInterface;

  functions: {
    getUSDBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getUSDToken(overrides?: CallOverrides): Promise<[string]>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

  "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

  getUSDToken(overrides?: CallOverrides): Promise<string>;

  "getUSDToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<string>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    ApproveTokens(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;

    ReceivedTokens(
      from: string | null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; amount: BigNumber }
    >;

    TransferTokens(
      to: string | null,
      amount: null
    ): TypedEventFilter<[string, BigNumber], { to: string; amount: BigNumber }>;
  };

  estimateGas: {
    getUSDBalance(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<BigNumber>;

    getUSDToken(overrides?: CallOverrides): Promise<BigNumber>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getUSDBalance(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUSDBalance()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUSDToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getUSDToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
