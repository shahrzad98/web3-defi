/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { BTCDistributor } from "../BTCDistributor";

export class BTCDistributor__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    swapRouterAddress: string,
    USDCContractAddress: string,
    wBTCContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<BTCDistributor> {
    return super.deploy(
      swapRouterAddress,
      USDCContractAddress,
      wBTCContractAddress,
      overrides || {}
    ) as Promise<BTCDistributor>;
  }
  getDeployTransaction(
    swapRouterAddress: string,
    USDCContractAddress: string,
    wBTCContractAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      swapRouterAddress,
      USDCContractAddress,
      wBTCContractAddress,
      overrides || {}
    );
  }
  attach(address: string): BTCDistributor {
    return super.attach(address) as BTCDistributor;
  }
  connect(signer: Signer): BTCDistributor__factory {
    return super.connect(signer) as BTCDistributor__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): BTCDistributor {
    return new Contract(address, _abi, signerOrProvider) as BTCDistributor;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "swapRouterAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "USDCContractAddress",
        type: "address",
      },
      {
        internalType: "address",
        name: "wBTCContractAddress",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "DistributedBTC",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getEstimatedBTCForUSD",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getPathForUSDToBTC",
    outputs: [
      {
        internalType: "address[]",
        name: "",
        type: "address[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getswapRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516103ca3803806103ca8339818101604052606081101561003357600080fd5b5080516020820151604090920151600080546001600160a01b039384166001600160a01b031991821617909155600180549484169482169490941790935560028054929091169190921617905561033b8061008f6000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806309082c29146100465780632e577d0714610075578063a508bc7114610099575b600080fd5b6100636004803603602081101561005c57600080fd5b50356100f1565b60408051918252519081900360200190f35b61007d61026f565b604080516001600160a01b039092168252519081900360200190f35b6100a161027e565b60408051602080825283518183015283519192839290830191858101910280838360005b838110156100dd5781810151838201526020016100c5565b505050509050019250505060405180910390f35b6000805481906001600160a01b031663d06ca61f8461010e61027e565b6040518363ffffffff1660e01b81526004018083815260200180602001828103825283818151815260200191508051906020019060200280838360005b8381101561016357818101518382015260200161014b565b50505050905001935050505060006040518083038186803b15801561018757600080fd5b505afa15801561019b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405260208110156101c457600080fd5b81019080805160405193929190846401000000008211156101e457600080fd5b9083019060208201858111156101f957600080fd5b825186602082028301116401000000008211171561021657600080fd5b82525081516020918201928201910280838360005b8381101561024357818101518382015260200161022b565b5050505090500160405250505090508060018151811061025f57fe5b6020026020010151915050919050565b6000546001600160a01b031690565b60408051600280825260608083018452926000929190602083019080368337505060015482519293506001600160a01b0316918391506000906102bd57fe5b6001600160a01b0392831660209182029290920101526002548251911690829060019081106102e857fe5b6001600160a01b039092166020928302919091019091015290509056fea26469706673582212203b6fcd1e69eacaf2e68979d1393cba11846113f4b8182169b1b82059c814b32464736f6c63430007060033";
