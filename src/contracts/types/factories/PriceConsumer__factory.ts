/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";

import type { PriceConsumer } from "../PriceConsumer";

export class PriceConsumer__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PriceConsumer> {
    return super.deploy(_oracle, overrides || {}) as Promise<PriceConsumer>;
  }
  getDeployTransaction(
    _oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_oracle, overrides || {});
  }
  attach(address: string): PriceConsumer {
    return super.attach(address) as PriceConsumer;
  }
  connect(signer: Signer): PriceConsumer__factory {
    return super.connect(signer) as PriceConsumer__factory;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PriceConsumer {
    return new Contract(address, _abi, signerOrProvider) as PriceConsumer;
  }
}

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_oracle",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "getDecimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getLatestPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516102263803806102268339818101604052602081101561003357600080fd5b50516001600160a01b03811661004857600080fd5b600080546001600160a01b039092166001600160a01b03199092169190911790556101ae806100786000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80638e15f4731461003b578063f0141d8414610055575b600080fd5b610043610073565b60408051918252519081900360200190f35b61005d610101565b6040805160ff9092168252519081900360200190f35b6000805460408051633fabe5a360e21b8152905183926001600160a01b03169163feaf968c9160048083019260a0929190829003018186803b1580156100b857600080fd5b505afa1580156100cc573d6000803e3d6000fd5b505050506040513d60a08110156100e257600080fd5b5060200151905060008112156100f95760006100fb565b805b91505090565b600080546040805163313ce56760e01b8152905183926001600160a01b03169163313ce567916004808301926020929190829003018186803b15801561014657600080fd5b505afa15801561015a573d6000803e3d6000fd5b505050506040513d602081101561017057600080fd5b50519150509056fea26469706673582212200322d21e1070471c77c59504778fdb73f4340da8f0a7412b5469481ae87ef7ed64736f6c63430007060033";
